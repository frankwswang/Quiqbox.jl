using Test
using Quiqbox
using Suppressor: @suppress_out

include("../../test/test-functions/Shared.jl")

@testset "HartreeFock.jl" begin

errorThreshold = 5e-8

nucCoords = [[-0.7,0.0,0.0], [0.7,0.0,0.0], [0.0, 0.0, 0.0]]
nuc = ["H", "H", "O"]
bs = genBasisFunc.(nucCoords, ("STO-3G", "STO-3G", ("STO-3G", "O"))) |> flatten
S = overlaps(bs)
Hcore = coreH(bs, nuc, nucCoords)
HeeI = eeInteractions(bs)
Ne = getCharge(nuc)
scfMethods = (:ADIIS, :DIIS, :EDIIS, :DD)
thresholds = (1e-4, 1e-8, 1e-10, 1e-12)
solvers = Dict(1=>[:solver=>:LCM], 2=>[:solver=>:LCM], 
               3=>[:solver=>:LCM], 4=>[:solver=>:LCM])

local res1, res2, res1_2, res2_2
SCFc1 = SCFconfig(scfMethods, thresholds)
SCFc2 = SCFconfig(scfMethods, thresholds, solvers)
HFc1 = HFconfig((C0=:Hcore, SCF=SCFc1))
HFc2 = HFconfig((SCF=SCFc1,))
HFc3 = HFconfig((HF=:UHF, C0=:GWH, SCF=SCFc2))
HFc4 = HFconfig((HF=:UHF, SCF=SCFc2))

@suppress_out begin
    res1   = runHF(bs, nuc, nucCoords, HFc1)
    res1_2 = runHF(bs, nuc, nucCoords, HFc2)
    res2   = runHF(bs, nuc, nucCoords, HFc3)
    res2_2 = runHF(bs, nuc, nucCoords, HFc4)
end

@test isapprox(res2.Ehf, res2_2.Ehf, atol=100errorThreshold)
@test isapprox(res1.Ehf, res1_2.Ehf, atol=errorThreshold)

@test begin
    tVars1 = deepcopy(res1.temp[1])
    Quiqbox.popHFtempVars!((tVars1,))
    push!(tVars1.Cs, res1.temp[1].Cs[end])
    push!(tVars1.Fs, res1.temp[1].Fs[end])
    push!(tVars1.Ds, res1.temp[1].Ds[end])
    push!(tVars1.Es, res1.temp[1].Es[end])
    push!(tVars1.shared.Dtots, res1.temp[1].shared.Dtots[end])
    push!(tVars1.shared.Etots, res1.temp[1].shared.Etots[end])
    hasEqual(tVars1, res1.temp[1])
end

@test res1.Ehf == Quiqbox.getEᵀ(Hcore, HeeI, res1.C, (Ne÷2,))
@test isapprox(res1.Ehf, -93.78783863282831, atol=errorThreshold)
                         
# Note: the orbital coefficients of 4th and 5th columns are so close that based on the 
# numerical error of each machine the position of them might switch.

@test isapprox(res1.C[1][1:5, [1,2,3,6,7]], 
[ 0.01089592   0.088981112  0.121607902  0.0  0.0  1.914545199  3.615733318; 
  0.01089592   0.088981112 -0.121607902  0.0  0.0  1.914545199 -3.615733318; 
 -0.994229867 -0.26343918   0.0          0.0  0.0  0.04969649   0.0; 
 -0.04159303   0.872249125  0.0          0.0  0.0 -3.396657448  0.0; 
  0.0          0.0          1.094020479  0.0  0.0  0.0          2.77867254; 
  0.0          0.0          0.0          1.0  0.0  0.0          0.0; 
  0.0          0.0          0.0          0.0  1.0  0.0          0.0][1:5, [1,2,3,6,7]], 
atol=errorThreshold)

@test  isapprox(vcat(res1.C[1][6:7,:][:], res1.C[1][1:5, 4:5][:]) |> sort, 
                vcat(fill(0,22), fill(1,2)), atol=errorThreshold)
@test  isapprox(res1.C[1][6:7, 4:5][:] |> sort, [0,0,1,1], atol=errorThreshold)

@test isapprox(res1.F[1], 
    [-2.255358694 -1.960982032  -4.484369217  -2.511689793  0.483603808  0.0  0.0; 
     -1.960982032 -2.255358694  -4.484369217  -2.511689793 -0.483603808  0.0  0.0; 
     -4.484369217 -4.484369217 -20.920383203  -5.363456846  0.0          0.0  0.0; 
     -2.511689793 -2.511689793  -5.363456846  -2.896377612  0.0          0.0  0.0; 
      0.483603808 -0.483603808   0.0           0.0         -1.280927055  0.0  0.0; 
      0.0          0.0           0.0           0.0          0.0 -0.661307604  0.0; 
      0.0          0.0           0.0           0.0          0.0  0.0 -0.661307604], 
atol=errorThreshold)
@test isapprox(res1.Eo[1], 
    [-20.930384497, -1.616675728, -1.284466204, -0.661307604, 
      -0.661307604,  1.060815276,  1.847804072], 
atol=errorThreshold)
@test res1.occu[1] == ("↿⇂", "↿⇂", "↿⇂", "↿⇂", "↿⇂", "0", "0")

D1 = res1.D[1]
@test isapprox(D1*S*D1, D1, atol=errorThreshold)


@test begin
    tVars2 = deepcopy(res2.temp)
    Quiqbox.popHFtempVars!(tVars2)
    push!(tVars2[1].Cs, res2.temp[1].Cs[end])
    push!(tVars2[1].Fs, res2.temp[1].Fs[end])
    push!(tVars2[1].Ds, res2.temp[1].Ds[end])
    push!(tVars2[1].Es, res2.temp[1].Es[end])
    push!(tVars2[2].Cs, res2.temp[2].Cs[end])
    push!(tVars2[2].Fs, res2.temp[2].Fs[end])
    push!(tVars2[2].Ds, res2.temp[2].Ds[end])
    push!(tVars2[2].Es, res2.temp[2].Es[end])
    push!(tVars2[2].shared.Dtots, res2.temp[2].shared.Dtots[end])
    push!(tVars2[2].shared.Etots, res2.temp[2].shared.Etots[end])
    hasEqual(tVars2, res2.temp)
end

@test res2.Ehf == Quiqbox.getEᵀ(Hcore, HeeI, res2.C, (Ne÷2, Ne-Ne÷2))
@test isapprox(res2.Ehf, -93.78783863286054, atol=errorThreshold)
@test isapprox.((res2.C[1][1:5, [1,2,3,6,7]], res2.C[2][1:5, [1,2,3,6,7]]), 
([ 0.01089594   0.089041697  0.121664492  0.0  0.0  1.914542382  3.615731414; 
   0.01089594   0.089041697 -0.121664492  0.0  0.0  1.914542382 -3.615731414; 
  -0.994229757 -0.263438019  0.0          0.0  0.0  0.049704855  0.0; 
  -0.041593492  0.872141629  0.0          0.0  0.0 -3.396685045  0.0; 
   0.0          0.0          1.094063968  0.0  0.0  0.0          2.778655417; 
   0.0          0.0          0.0          0.0  1.0  0.0          0.0; 
   0.0          0.0          0.0          1.0  0.0  0.0          0.0][1:5, [1,2,3,6,7]], 
 [ 0.010895222  0.088806994  0.121417722  0.0  0.0  1.914553287  3.615739709; 
   0.010895222  0.088806994 -0.121417722  0.0  0.0  1.914553287 -3.615739709; 
  -0.99423018  -0.263442595  0.0          0.0  0.0  0.04967212   0.0; 
  -0.04159065   0.872558054  0.0          0.0  0.0 -3.39657813   0.0; 
   0.0          0.0          1.093874325  0.0  0.0  0.0          2.77873008; 
   0.0          0.0          0.0          0.0  1.0  0.0          0.0; 
   0.0          0.0          0.0          1.0  0.0  0.0          0.0][1:5, [1,2,3,6,7]]), 
atol=errorThreshold*2) |> all

@test  isapprox(vcat(res2.C[1][6:7,:][:], res2.C[1][1:5, 4:5][:]) |> sort, 
                vcat(fill(0,22), fill(1,2)), atol=errorThreshold)
@test  isapprox(res2.C[1][6:7, 4:5][:] |> sort, [0,0,1,1], atol=errorThreshold)

@test  isapprox(vcat(res2.C[2][6:7,:][:], res2.C[2][1:5, 4:5][:]) |> sort, 
                vcat(fill(0,22), fill(1,2)), atol=errorThreshold)
@test  isapprox(res2.C[2][6:7, 4:5][:] |> sort, [0,0,1,1], atol=errorThreshold)
@test isapprox.(res2.F, 
([-2.255358614 -1.960981693  -4.484370055 -2.511684959  0.483605009  0.0  0.0; 
  -1.960981693 -2.255358614  -4.484370055 -2.511684959 -0.483605009  0.0  0.0; 
  -4.484370055 -4.484370055 -20.920381414 -5.363457903  0.0          0.0  0.0; 
  -2.511684959 -2.511684959  -5.363457903 -2.896366402  0.0          0.0  0.0; 
   0.483605009 -0.483605009   0.0          0.0         -1.280932882  0.0  0.0; 
   0.0          0.0           0.0          0.0          0.0 -0.661297954  0.0; 
   0.0          0.0           0.0          0.0          0.0  0.0 -0.661297954],
 [-2.255351654 -1.960975505  -4.484365884 -2.5116929    0.483599823  0.0  0.0; 
  -1.960975505 -2.255351654  -4.484365884 -2.5116929   -0.483599823  0.0  0.0; 
  -4.484365884 -4.484365884 -20.920384389 -5.363452258  0.0          0.0  0.0; 
  -2.5116929   -2.5116929    -5.363452258 -2.896394163  0.0          0.0  0.0; 
   0.483599823 -0.483599823   0.0          0.0         -1.280906441  0.0  0.0; 
   0.0          0.0           0.0          0.0          0.0 -0.661313504  0.0; 
   0.0          0.0           0.0          0.0          0.0  0.0 -0.661313504]), 
atol=errorThreshold) |> all
@test isapprox.(res2.Eo, 
([-20.930382769, -1.616665004, -1.284472548, -0.661297954, 
   -0.661297954,  1.060821979,  1.847800591], 
 [-20.930385454, -1.616691574, -1.284443638, -0.661313504, 
   -0.661313504,  1.060804334,  1.847816511]), 
atol=errorThreshold) |> all

@test all( res2.occu .== ( ("↿", "↿", "↿", "↿", "↿", "0", "0"), 
                           ("⇂", "⇂", "⇂", "⇂", "⇂", "0", "0") ) )
D2s = res2.D
for D in D2s
    @test isapprox(D*S*D, D, atol=errorThreshold)
end

# Potential energy curve tests.
nuc2 = ["H", "H"]
range = 0.1:0.2:19.9
Erhf = Float64[]
Euhf = Float64[]
Enuc = Float64[]

for i in range
    nucCoords2 = [[0, 0.0, 0.0], [i, 0.0, 0.0]]

    bs = genBasisFunc.(nucCoords2, "3-21G") |> flatten
    res1 = runHF(bs, nuc2, nucCoords2, printInfo=false)
    # @show length(res1.temp[1].Cs)
    push!(Erhf, res1.Ehf)
    res2 = runHF(bs, nuc2, nucCoords2, HFconfig((HF=:UHF,)), printInfo=false)
    # @show length(res2.temp[1].Cs)
    push!(Euhf, res2.Ehf)
    push!(Enuc, res1.Enn)
end

rhfs = [ 7.275712508,  0.721327344, -0.450914129, -0.860294199, -1.029212153, -1.098483134, 
        -1.12116316,  -1.12068526,  -1.108423332, -1.090377472, -1.06979209,  -1.048358444, 
        -1.026929524, -1.005949751, -0.985675141, -0.966266831, -0.947825531, -0.93040561, 
        -0.914025059, -0.898675515, -0.884331776, -0.870959502, -0.858520505, -0.846975806, 
        -0.836287041, -0.826416815, -0.81732844,  -0.808985378, -0.801350617, -0.794386143, 
        -0.788052639, -0.782309455, -0.777114838, -0.772426373, -0.768201548, -0.764398372, 
        -0.760975967, -0.757895111, -0.755118673, -0.752611963, -0.750342966, -0.748282481, 
        -0.746404172, -0.74468454,  -0.743102829, -0.741640881, -0.740282953, -0.73901551, 
        -0.737826999, -0.736707621, -0.735649109, -0.734644515, -0.733688011, -0.732774716, 
        -0.73190053,  -0.731062005, -0.730256222, -0.729480696, -0.728733293, -0.728012163, 
        -0.727315685, -0.726642428, -0.725991112, -0.725360583, -0.72474979,  -0.724157774, 
        -0.723583648, -0.723026588, -0.72248583,  -0.721960657, -0.721450398, -0.720954422, 
        -0.720472134, -0.720002974, -0.719546412, -0.719101945, -0.718669099, -0.718247424, 
        -0.717836493, -0.7174359,   -0.717045259, -0.716664205, -0.716292389, -0.715929478, 
        -0.715575157, -0.715229124, -0.714891092, -0.714560787, -0.714237946, -0.713922319, 
        -0.713613668, -0.713311763, -0.713016385, -0.712727326, -0.712444385, -0.712167369, 
        -0.711896094, -0.711630383, -0.711370055, -0.711114987]

uhfs = [ 7.275712508,  0.721327344, -0.450914129, -0.860294199, -1.029212153, -1.098483134, 
        -1.12116316,  -1.12068526,  -1.108423327, -1.090377412, -1.069791976, -1.048701912, 
        -1.032357188, -1.020787228, -1.01259153,  -1.006780872, -1.002658864, -0.999733913, 
        -0.997657971, -0.996184131, -0.99513707,  -0.994392271, -0.993861306, -0.993481374, 
        -0.99320788,  -0.993009217, -0.992863103, -0.992753979, -0.992671126, -0.992607258, 
        -0.992557465, -0.992518423, -0.992487828, -0.992464006, -0.992445669, -0.992431764, 
        -0.992421407, -0.992413842, -0.99240843,  -0.99240464,  -0.992402043, -0.992400301, 
        -0.992399158, -0.992398424, -0.992397962, -0.992397678, -0.992397506, -0.992397405, 
        -0.992397346, -0.992397312, -0.992397294, -0.992397283, -0.992397278, -0.992397275, 
        -0.992397274, -0.992397273, -0.992397272, -0.992397272, -0.992397272, -0.992397272, 
        -0.992397272, -0.992397272, -0.992397272, -0.992397272, -0.992397272, -0.992397272, 
        -0.992397272, -0.992397272, -0.992397272, -0.992397272, -0.992397272, -0.992397272, 
        -0.992397272, -0.992397272, -0.992397272, -0.992397272, -0.992397272, -0.992397272, 
        -0.992397272, -0.992397272, -0.992397272, -0.992397272, -0.992397272, -0.992397272, 
        -0.992397272, -0.992397272, -0.992397272, -0.992397272, -0.992397272, -0.992397272, 
        -0.992397272, -0.992397272, -0.992397272, -0.992397272, -0.992397272, -0.992397272, 
        -0.992397272, -0.992397272, -0.992397272, -0.992397272]

Et1 = Erhf + Enuc
Et2 = Euhf + Enuc
cutoffIdx = Int(length(range) ÷ 1.5)

compr2Arrays2((Et1=Et1, rhfs=rhfs), cutoffIdx, errorThreshold, 1e-5)
compr2Arrays2((Et2=Et2, uhfs=uhfs), cutoffIdx, errorThreshold, 1e-5)

end