using Test
using Quiqbox
using LinearAlgebra

@testset "OneBody.jl tests" begin

errT = 5e-14
nucs = ["H", "H"]
cens = [[-0.7, 0.0, 0.0], [ 0.7, 0.0, 0.0]]
bf1 = genBasisFunc(cens[1], "STO-3G", "H")[]
bf2 = genBasisFunc(cens[2], "STO-3G", "H")[]
bf3 = genBasisFunc(cens[2], "cc-pVDZ", "O")[end][4:end]
bs1 = [bf1, bf2, bf3]

S = overlaps(bs1)
@test issymmetric(S)
@test all(isapprox(m, 1, atol=2e3*errT) for m in diag(S))
S1 = [1.0000000000699911 0.6593182058508894 0.35582363020245 0.0 0.35582363020245; 
      0.6593182058508894 1.0000000000699911 0.6541757294572548 0.0 0.6541757294572548; 
      0.35582363020245 0.6541757294572548 0.9999999999999998 0.0 0.3333333333333331; 
      0.0 0.0 0.0 0.9999999999999994 0.0; 
      0.35582363020245 0.6541757294572548 0.3333333333333331 0.0 0.9999999999999998]
@test isapprox(overlap(bf1, bf2), S1[2], atol=errT)
@test isapprox(S, S1)

T = eKinetics(bs1)
@test issymmetric(T)
T1 = [0.7600318799755841 0.2364546582907927 0.04420756804164788 0.0 0.04420756804164788; 
      0.2364546582907927 0.7600318799755841 0.30392251249031754 0.0 0.30392251249031754; 
      0.04420756804164788 0.30392251249031754 2.5674999999999994 0.0 -0.19749999999999993; 
      0.0 0.0 0.0 4.147500000000001 0.0; 
      0.04420756804164788 0.30392251249031754 -0.19749999999999993 0.0 2.5674999999999994]
@test isapprox(eKinetic(bf1, bf2), T1[2], atol=errT)
@test isapprox(T, T1)

V = neAttractions(bs1, nucs, cens)
@test issymmetric(V)
V1 = [-1.8804408905227787 -1.1948346220535693 -0.5751698615142211 0.0 -0.5751698615142211; 
      -1.1948346220535693 -1.8804408905227787 -1.0487603571248654 0.0 -1.0487603571248654; 
      -0.5751698615142211 -1.0487603571248654 -1.5116748590291742 0.0 -0.503891619676392; 
      0.0 0.0 0.0 -1.5116748590291744 0.0; 
      -0.5751698615142211 -1.0487603571248654 -0.503891619676392 0.0 -1.5116748590291742]
@test isapprox(neAttraction(bf2, bf2, nucs, cens), V1[1], atol=errT)
@test isapprox(V, V1, atol=errT)

Hc = coreH(bs1, nucs, cens)
@test isapprox(Hc, T+V, atol=errT)
@test issymmetric(Hc)
@test isapprox(coreHij(bf1, bf1, nucs, cens)[], Hc[1], atol=errT)
@test isapprox(coreHij(bf2, bf1, nucs, cens)[], Hc[2], atol=errT)
@test isapprox(coreHij(bf2, bf2, nucs, cens)[], Hc[7], atol=errT)

bfs = genBasisFunc([0.0, 1.0, 0.0], (3.0, 2.0), "D")
S2 = [0.05500737317448705, 0.007889909514207271, 0.0, 0.060755735820552347, 0.0, 
      0.04948443651454196]
@test isapprox(overlap.(bfs, bf1), S2, atol=errT)

T2 = [0.03109226385762348, 0.024410649374158908, 0.0, 0.04887716554451067, 0.0, 
      0.014004809295712248]
@test isapprox(eKinetic.(bf1, bfs), T2, atol=errT)

V3 = [-0.05113501485923333 0.0 0.0 -0.01876634303881002 0.0 -0.016162526925699305; 
      0.0 -0.018766343038810016 0.0 0.0 0.0 0.0; 
      0.0 0.0 -0.016162526925699305 0.0 0.0 0.0; 
      -0.01876634303881002 0.0 0.0 -0.05728524139638176 0.0 -0.01687630012490613; 
      0.0 0.0 0.0 0.0 -0.016876300124906134 0.0; 
      -0.016162526925699305 0.0 0.0 -0.01687630012490613 0.0 -0.046430234497031174]
@test isapprox(neAttractions((bfs,), nucs, cens), V3, atol=errT)

bfF32_1 = genBasisFunc(Float32[1.0, 1.0, 1.0], (1.2f0, 2.3f0), :p)
bfF32_2 = genBasisFunc(Float32[1.0, 3.0, 0.0], ([1.25f0, 5.12f0], [2.3f0, -1.1f0]))
bsF32 = [bfF32_1, bfF32_2]
H2 = ["H", "H"]
H2coords = [[0.4f0, 0.0f0, 0.0f0], [-0.4f0, 0.02f0, 0.0f0]]
@test coreH(bsF32, H2, H2coords) isa Matrix{Float32}

end