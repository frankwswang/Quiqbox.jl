export gradOfHFenergy

using LinearAlgebra: eigen, Symmetric, Hermitian
using ForwardDiff: derivative as ForwardDerivative
using TensorOperations: @tensor as @TOtensor
using DoubleFloats: Double64
using Base: OneTo

# Reference(s):
## [DOI] 10.1063/1.445528

function ‚àÇ1BodyCore(bfs::AbstractVector{<:GTBasisFuncs{T1, D1, 1}}, 
                    ‚àÇbfs::AbstractVector{<:GTBasisFuncs{T1, D1, 1}}, 
                    X::Matrix{T2}, ‚àÇX::Matrix{T2}, 
                     Éab::Array{T1},  É::F) where {T1, D1, T2, F<:Function}
    BN = length(bfs)
    ‚àÇ Éab = similar( Éab)
    shift1 = firstindex( bfs) - 1
    shift2 = firstindex(‚àÇbfs) - 1
    Threads.@threads for k in (OneTo‚àòtriMatEleNum)(BN)
        i, j = convert1DidxTo2D(BN, k)
        @inbounds ‚àÇ Éab[i,j] = ‚àÇ Éab[j,i] = 
                   É(‚àÇbfs[i+shift2], bfs[j+shift1]) +  É(bfs[i+shift1], ‚àÇbfs[j+shift2])
    end
    X' * ‚àÇ Éab * X + ‚àÇX' *  Éab * X + X' *  Éab * ‚àÇX
end

function ‚àÇ2BodyCore(bfs::AbstractVector{<:GTBasisFuncs{T1, D1, 1}}, 
                    ‚àÇbfs::AbstractVector{<:GTBasisFuncs{T1, D1, 1}}, 
                    Xcols::MatrixCol{T2}, ‚àÇXcols::MatrixCol{T2}, 
                     Éabcd::Array{T1, D2},  É::F) where {T1, D1, T2, D2, F<:Function}
    BN = length(bfs)
     É‚àÇabcd = similar( Éabcd)
    ‚àÇ É = Array{promote_type(T1, T2)}(undef, size( Éabcd)...)
    shift1 = firstindex( bfs) - 1
    shift2 = firstindex(‚àÇbfs) - 1
    # ijkl in the chemists' notation of spatial bases (ij|kl).
    @sync for lk in (OneTo‚àòtriMatEleNum)(BN), j=OneTo(BN), i=OneTo(BN)
        Threads.@spawn begin
            k, l = convert1DidxTo2D(BN, lk)
            @inbounds  É‚àÇabcd[i,j,l,k] =  É‚àÇabcd[i,j,k,l] = 
                       É(‚àÇbfs[i+shift2], bfs[j+shift1],  bfs[k+shift1],  bfs[l+shift1])
        end
    end
    # [‚àÇ É4[i,j,k,l] == ‚àÇ É4[j,i,l,k] == ‚àÇ É4[j,i,k,l] != ‚àÇ É4[l,j,k,i]
    Threads.@threads for m in (OneTo‚àòtriMatEleNum‚àòtriMatEleNum)(BN)
        #  É‚àÇabcd[i,j,k,l] ==  É‚àÇabcd[i,j,l,k] ==  Éab‚àÇcd[l,k,i,j] ==  Éab‚àÇcd[k,l,i,j]
        i, j, k, l = convert1DidxTo4D(BN, m)
        @inbounds begin
             Xvi =  Xcols[i]
             Xvj =  Xcols[j]
             Xvk =  Xcols[k]
             Xvl =  Xcols[l]
            ‚àÇXvi = ‚àÇXcols[i]
            ‚àÇXvj = ‚àÇXcols[j]
            ‚àÇXvk = ‚àÇXcols[k]
            ‚àÇXvl = ‚àÇXcols[l]

            @TOtensor val = 
                (Xvi[a] * Xvj[b] * Xvk[c] * Xvl[d] + Xvj[a] * Xvi[b] * Xvk[c] * Xvl[d] + 
                 Xvi[c] * Xvj[d] * Xvk[a] * Xvl[b] + Xvi[c] * Xvj[d] * Xvl[a] * Xvk[b]) * 
                 É‚àÇabcd[a,b,c,d] + 
                (‚àÇXvi[a] *  Xvj[b] *  Xvk[c] *  Xvl[d] + 
                  Xvi[a] * ‚àÇXvj[b] *  Xvk[c] *  Xvl[d] + 
                  Xvi[a] *  Xvj[b] * ‚àÇXvk[c] *  Xvl[d] + 
                  Xvi[a] *  Xvj[b] *  Xvk[c] * ‚àÇXvl[d] ) * 
                 Éabcd[a,b,c,d]

            ‚àÇ É[i,j,k,l] = ‚àÇ É[j,i,k,l] = ‚àÇ É[j,i,l,k] = ‚àÇ É[i,j,l,k] = 
            ‚àÇ É[l,k,i,j] = ‚àÇ É[k,l,i,j] = ‚àÇ É[k,l,j,i] = ‚àÇ É[l,k,j,i] = val
        end
    end
    ‚àÇ É
end


function ‚àÇNBodyInts(bfs::AbstractVector{<:GTBasisFuncs{T1, D, 1}}, par::ParamBox, 
                    (Œª, ùë£)::Tuple{Vector{T2}, Matrix{T2}}, X::Hermitian{T2, Matrix{T2}}, 
                     Éab::Array{T1},  Éabcd::Array{T1}, 
                     É2::F1,  É4::F2) where {T1, T2, D, F1<:Function, F2<:Function}
    BN = length(bfs)
    ‚àÇbfs = ‚àÇBasis.(par, bfs)
    ‚àÇS = Array{T2}(undef, BN, BN)
    ‚àÇX = Array{T2}(undef, BN, BN) # ‚àÇX corresponds to the derivative of X = S^(-0.5)
    ‚àÇX‚ÇÄ = Array{T2}(undef, BN, BN) # ‚àÇX in its eigen basis
    shift1 = firstindex( bfs) - 1
    shift2 = firstindex(‚àÇbfs) - 1
    rng = (OneTo‚àòtriMatEleNum)(BN)
    Threads.@threads for k in rng
        i, j = convert1DidxTo2D(BN, k)
        @inbounds ‚àÇS[i,j] = ‚àÇS[j,i] = overlap(‚àÇbfs[i+shift2],  bfs[j+shift1]) + 
                                      overlap( bfs[i+shift1], ‚àÇbfs[j+shift2])
    end
    ‚àÇS2 = ùë£' * ‚àÇS * ùë£
    Threads.@threads for k in rng
        i, j = convert1DidxTo2D(BN, k)
        @inbounds ‚àÇX‚ÇÄ[i,j] = ‚àÇX‚ÇÄ[j,i] = ( -‚àÇS2[i,j] / ( sqrt(Œª[i]) * sqrt(Œª[j]) * 
                                          (sqrt(Œª[i]) + sqrt(Œª[j])) ) )
    end
    ‚àÇX = ùë£ * ‚àÇX‚ÇÄ * ùë£'
    nX = norm(X)
    n‚àÇX = norm(‚àÇX)
    T = ifelse( (0.317 < nX < 1.778) && # ‚Å¥‚àö0.01 < nX < ‚Å¥‚àö10
                (0.01    < n‚àÇX < 10) && (0.01 < nX*n‚àÇX < 10) && (0.01 < nX^3*n‚àÇX < 10), 
        T1, T2)
    X = convert(Matrix{T}, X)
    ‚àÇX = convert(Matrix{T}, ‚àÇX)
    Xcols = (collect‚àòeachcol)(X)
    ‚àÇXcols = (collect‚àòeachcol)(‚àÇX)
    ‚àÇ É2 = ‚àÇ1BodyCore(bfs, ‚àÇbfs, X,     ‚àÇX,      Éab,    É2)
    ‚àÇ É4 = ‚àÇ2BodyCore(bfs, ‚àÇbfs, Xcols, ‚àÇXcols,  Éabcd,  É4)
    ‚àÇ É2, ‚àÇ É4
end


function ‚àáEhf(pars::AbstractVector{<:ParamBox}, 
              b::GTBasis{T, D}, 
              C::NTuple{HFTS, AbstractMatrix{T}}, 
              nuc::Tuple{String, Vararg{String, NNMO}}, 
              nucCoords::Tuple{NTuple{D, T}, Vararg{NTuple{D, T}, NNMO}}, 
              N::NTuple{HFTS, Int}) where {T, D, HFTS, NNMO}
    bfs = collect(b.basis)
    S = b.S
    numEps(T) > eps(Double64) && (S = Double64.(S))
    (Œª, ùë£) = eigen(S|>Hermitian)
    X = getXcore1(S)
    Hcore = coreH(b, nuc, nucCoords)
    eeI = b.eeI
    cH = (i, j)->coreHij(i, j, nuc, nucCoords)
    map(pars) do par
        ‚àÇhij, ‚àÇhijkl = ‚àÇNBodyInts(bfs, par, (Œª, ùë£), X, Hcore, eeI, cH, eeInteraction)
        # ‚àÇhij and ‚àÇhijkl are on an orthonormal basis.
        C‚Çìs = convert.(Matrix{eltype(‚àÇhij)}, (Ref‚àòinv)(X).*C)
        convert(T, getEhf(‚àÇhij, ‚àÇhijkl, C‚Çìs, N))
    end
end


"""

    gradOfHFenergy(par::AbstractVector{<:ParamBox{T}}, HFres::HFfinalVars{T}) where {T} -> 
    AbstractVector{T}

Given a Hartree-Fock approximation result `HFres`, return the gradient of the Hartree-Fock 
energy with respect to a collection of parameters `par`. Specifically, for any 
[`ParamBox`](@ref) in `par`, unlike other cases where the it is always the output variable 
that is represented by the `ParamBox`, here the corresponding independent variable is 
represented by the `ParamBox`, so when the `ParamBox` is marked as differentiable (i.e., 
[`isDiffParam`](@ref) returns `true`), the variable it represents switches to its input 
variable.
"""

gradOfHFenergy(par::AbstractVector{<:ParamBox{T}}, HFres::HFfinalVars{T}) where {T} = 
gradOfHFenergy(par, HFres.basis, HFres.C, HFres.nuc, HFres.nucCoord, HFres.Ns)


"""

    gradOfHFenergy(par, basis, C, nuc, nucCoords, N=getCharge(nuc)) -> AbstractVector

    gradOfHFenergy(par, bs, C, nuc, nucCoords, N=getCharge(nuc)) -> AbstractVector

Two methods of `gradOfHFenergy`.

‚â°‚â°‚â° Positional argument(s) ‚â°‚â°‚â°

`par::AbstractVector{<:ParamBox}`: The parameters for differentiation.

`basis::`[`GTBasis`](@ref)`{T, D} where {T, D}`: Basis set information.

`C::NTuple{<:Any, AbstractMatrix{T}} where T`: The coefficient matrix(s) of the canonical 
orbitals with respect to the selected basis set.

`nuc::Union{
    Tuple{String, Vararg{String, NNMO}} where NNMO, 
    AbstractVector{String}
}`: The nuclei in the studied system.

`nucCoords::$(SpatialCoordType)`: The coordinates of corresponding nuclei.

`N::Union{Int, Tuple{Int}, NTuple{2, Int}}`: Total number of electrons, or the number(s) of 
electrons with same spin configurations(s).

`bs::Union{
    NTuple{BN, GTBasisFuncs{T, D, 1}}, 
    AbstractVector{<:GTBasisFuncs{T, D, 1}}
} where {T, D}`: A collection of basis functions.

**NOTE:** If any of these two methods is applied, the user needs to make sure the row 
orders as well as the colum orders of `C` are consistent with the element order of `bs` 
(`basis.basis`).
``
"""
gradOfHFenergy(pars::AbstractVector{<:ParamBox}, b::GTBasis{T, D}, 
               C::NTuple{HFTS, AbstractMatrix{T}}, 
               nuc::AVectorOrNTuple{String, NNMO}, 
               nucCoords::SpatialCoordType{T, D, NNMO}, 
               N::Union{Int, Tuple{Int}, NTuple{2, Int}}=getCharge(nuc)) where 
              {T, D, HFTS, NNMO} = 
‚àáEhf(pars, b, C, arrayToTuple(nuc), genTupleCoords(T, nucCoords), splitSpins(Val(HFTS), N))

gradOfHFenergy(pars::AbstractVector{<:ParamBox{T}}, 
               bs::AVectorOrNTuple{GTBasisFuncs{T, D, 1}}, 
               C::NTuple{HFTS, AbstractMatrix{T}}, 
               nuc::AVectorOrNTuple{String, NNMO}, 
               nucCoords::SpatialCoordType{T, D, NNMO}, 
               N::Union{Int, Tuple{Int}, NTuple{2, Int}}=getCharge(nuc)) where 
              {T, D, HFTS, NNMO} = 
gradOfHFenergy(pars, GTBasis(bs), C, nuc, nucCoords, N)


ùëëf(f::Function, x) = ForwardDerivative(f, x)

ùëëf(::DI, ::T) where {T} = T(1.0)

‚àÇSGFcore(::Val{xpnSym}, sgf::FGTBasisFuncs1O{T, 3, ùëô, 1}, c::T=T(1)) where {T, ùëô} = 
hasNormFactor(sgf) ? ‚àÇSGF‚àÇxpn2(sgf, c) : ‚àÇSGF‚àÇxpn1(sgf, c)

function ‚àÇSGF‚àÇxpn1(sgf::FGTBasisFuncs1O{T, 3, ùëô, 1}, c::T) where {T, ùëô}
    ( shiftCore(+, sgf, LTuple(2,0,0)) + shiftCore(+, sgf, LTuple(0,2,0)) + 
      shiftCore(+, sgf, LTuple(0,0,2)) ) * (-c)
end

function ‚àÇSGF‚àÇxpn2(sgf::FGTBasisFuncs1O{T, 3, ùëô, 1}, c::T) where {T, ùëô}
    Œ± = sgf.gauss[begin].xpn()
    ugf = genBasisFunc(sgf, false)
    ‚àÇSGF‚àÇxpn1(ugf, c) * getNijkŒ±(sgf.l[1].tuple, Œ±) + sgf * ( c * (ùëô/T(2) + T(0.75)) / Œ± )
end

function ‚àÇSGFcore(::Val{conSym}, sgf::FGTBasisFuncs1O{T, D, ùëô, 1}, c::T=T(1)) where {T, D, ùëô}
    BasisFunc(sgf.center, GaussFunc(sgf.gauss[begin].xpn, c), sgf.l, sgf.normalizeGTO)
end

function ‚àÇSGFcore(::Val{cxSym}, sgf::FGTBasisFuncs1O{T, 3, ùëô, 1}, c::T=T(1)) where {T, ùëô}
    sgf = hasNormFactor(sgf) ? absorbNormFactor(sgf)[begin] : sgf
    shiftCore(-, sgf, LTuple(1,0,0)) * (-c*sgf.l[begin][1]) + 
    shiftCore(+, sgf, LTuple(1,0,0)) * (2c*sgf.gauss[begin].xpn())
end

function ‚àÇSGFcore(::Val{cySym}, sgf::FGTBasisFuncs1O{T, 3, ùëô, 1}, c::T=T(1)) where {T, ùëô}
    sgf = hasNormFactor(sgf) ? absorbNormFactor(sgf)[begin] : sgf
    shiftCore(-, sgf, LTuple(0,1,0)) * (-c*sgf.l[begin][2]) + 
    shiftCore(+, sgf, LTuple(0,1,0)) * (2c*sgf.gauss[begin].xpn())
end

function ‚àÇSGFcore(::Val{czSym}, sgf::FGTBasisFuncs1O{T, 3, ùëô, 1}, c::T=T(1)) where {T, ùëô}
    sgf = hasNormFactor(sgf) ? absorbNormFactor(sgf)[begin] : sgf
    shiftCore(-, sgf, LTuple(0,0,1)) * (-c*sgf.l[begin][3]) + 
    shiftCore(+, sgf, LTuple(0,0,1)) * (2c*sgf.gauss[begin].xpn())
end

const sgfSample = genBasisFunc([0.0, 0.0, 0.0], (2.0, 1.0))

const cxIndex  = findfirst(x -> outSymOf(x) ==  cxSym, sgfSample.param)
const cyIndex  = findfirst(x -> outSymOf(x) ==  cySym, sgfSample.param)
const czIndex  = findfirst(x -> outSymOf(x) ==  czSym, sgfSample.param)
const xpnIndex = findfirst(x -> outSymOf(x) == xpnSym, sgfSample.param)
const conIndex = findfirst(x -> outSymOf(x) == conSym, sgfSample.param)

getVpar(sgf::FGTBasisFuncs1O{<:Any, <:Any, <:Any, 1}, ::Val{cxSym}) = sgf.param[cxIndex]
getVpar(sgf::FGTBasisFuncs1O{<:Any, <:Any, <:Any, 1}, ::Val{cySym}) = sgf.param[cyIndex]
getVpar(sgf::FGTBasisFuncs1O{<:Any, <:Any, <:Any, 1}, ::Val{czSym}) = sgf.param[czIndex]
getVpar(sgf::FGTBasisFuncs1O{<:Any, D, <:Any, 1}, ::Val{xpnSym}) where {D} = 
sgf.param[xpnIndex-3+D]
getVpar(sgf::FGTBasisFuncs1O{<:Any, D, <:Any, 1}, ::Val{conSym}) where {D} = 
sgf.param[conIndex-3+D]
getVpar(::FGTBasisFuncs1O{T, D, <:Any, 1}, ::Val) where {T, D} = ParamBox(0.0)

function ‚àÇBasisCore1(par::ParamBox{T, V, FL}, sgf::FGTBasisFuncs1O{T, D, <:Any, 1}) where 
                    {T, FL, V, D}
    mapreduce(+, sgf.param) do fPar
        c = if isDiffParam(fPar) && compareParamBoxCore1(fPar, par)
            ùëëf(fPar.map, fPar[])
        else
            0
        end
        iszero(c) ? EmptyBasisFunc{T, D}() : ‚àÇSGFcore(Val(outSymOf(fPar)), sgf, c)
    end
end

function ‚àÇBasisCore2(par::ParamBox{T, V, FL}, sgf::FGTBasisFuncs1O{T, D, <:Any, 1}) where 
                    {T, V, FL, D}
    dividend = getVpar(sgf, Val(V))
    if !isDiffParam(dividend) && compareParamBoxCore2(par, dividend)
        ‚àÇSGFcore(Val(V), sgf)
    else
        EmptyBasisFunc{T, D}()
    end
end

‚àÇBasis(par::ParamBox{T, V, FL}, sgf::FGTBasisFuncs1O{T, D, <:Any, 1}) where {T, V, FL, D} = 
isDiffParam(par) ? ‚àÇBasisCore1(par, sgf) : ‚àÇBasisCore2(par, sgf)

‚àÇBasis(par::ParamBox{T, V, FL}, b::FGTBasisFuncs1O{T}) where {T, V, FL} = 
‚àÇBasis.(par, reshape(decomposeCore(Val(true), b), :)) |> sum

‚àÇBasis(par::ParamBox{T}, b::BasisFuncMix{T}) where {T} = 
‚àÇBasis.(par, b.BasisFunc) |> sum

‚àÇBasis(par::ParamBox{T}, b::EmptyBasisFunc{T, D}) where {T, D} = EmptyBasisFunc{T, D}()